#!/usr/bin/env ruby

# Copyright 2008 by Roy Wright
# License: GPL version 2 (http://www.opensource.org/licenses/gpl-2.0.php)

# == Synopsis
# LinuxMCE stores the media images in /home/mediapics with root.root ownership
# and 644 (-rw-r--r--) permissions.  Therefore to change the images the calling
# script must be ran with sudo.  Since it is a really bad idea to run rails
# as root (Passenger even prohibits it), this script is called from the rails
# app using sudo.
#
# == Details
# It is necessary to allow this script to be ran as sudo without a password.
# So run:
#
#   sudo visudo
#
# then add this line:
#
#   linuxmce        ALL = NOPASSWD:/var/rails/lmce_manager/current/script/manage_mediapics
#
# == Usage
#   system("sudo #{File.join(RAILS_ROOT, 'script/manage_mediapics')} --command delete --fk_picture #{self.id} --dest_dir /home/mediapics"
#   system("sudo #{File.join(RAILS_ROOT, 'script/manage_mediapics')} --command update --fk_picture #{self.id} --image_source #{image_srcname} --dest_dir #{dest_dirname}"
#
# == Author
# Roy Wright
#

require 'rubygems'
require 'commandline/optionparser'
include CommandLine

class ManageMediapics
  def initialize(config, logger)
    @config = config
    @logger = logger
  end
  
  def execute
    @logger.debug "execute()"
    @logger.debug "config = #{@config.inspect}"
    [:command, :fk_picture, :dest_dir].each { |arg| require_argument(arg) }

    case @config[:command]
    when 'update'
      require_argument(:image_source)
      update @config[:fk_picture], @config[:image_source], @config[:dest_dir]
    when 'delete'
      delete @config[:fk_picture], @config[:dest_dir]
    else
      raise ArgumentError.new("Invalid command value: \"#{@config[:command]}\"")
    end
  end

protected

  def require_argument(arg)
    raise ArgumentError.new("missing required argument: --#{arg.to_s}") if @config[arg].nil? || @config[arg] == false
  end

  def update(fk_picture, image_source, dest_dir)
    @logger.debug "update(#{fk_picture}, #{image_source}, #{dest_dir})"
    
    raise ArgumentError.new("image source file (#{image_source}) does not exist") unless File.exists? image_source
    raise ArgumentError.new("image source file (#{image_source}) is not a file") unless File.file? image_source
    raise ArgumentError.new("image source file (#{image_source}) is not readable") unless File.readable? image_source
    
    raise ArgumentError.new("destination directory (#{dest_dir}) does not exist") unless File.exists? dest_dir
    raise ArgumentError.new("destination directory (#{dest_dir}) is not a directory") unless File.directory? dest_dir
    raise ArgumentError.new("destination directory (#{dest_dir}) is not writable") unless File.writable? dest_dir
    
    image_destname = File.join(dest_dir, "#{fk_picture}.jpg")
    thumbnail_destname = File.join(dest_dir, "#{fk_picture}_tn.jpg")
    
    if File.exists? image_destname
      raise ArgumentError.new("image destination file (#{image_destname}) is not writable") unless File.writable? image_destname
    end
    if File.exists? thumbnail_destname
      raise ArgumentError.new("thumbnail destination file (#{thumbnail_destname}) is not writable") unless File.writable? thumbnail_destname
    end
    
    FileUtils.rm(image_destname) if File.exist?(image_destname)
    FileUtils.rm(thumbnail_destname) if File.exist?(thumbnail_destname)
    FileUtils.cp(image_source, image_destname)
    `chown root:root #{image_destname}`
  end
  
  def delete(fk_picture, dest_dir)
    @logger.debug "delete(#{fk_picture}, #{dest_dir})"
    raise ArgumentError.new("destination directory (#{dest_dir}) does not exist") unless File.exists? dest_dir
    raise ArgumentError.new("destination directory (#{dest_dir}) is not a directory") unless File.directory? dest_dir
    raise ArgumentError.new("destination directory (#{dest_dir}) is not writable") unless File.writable? dest_dir
    
    delete_file(File.join(dest_dir, "#{fk_picture}.jpg"), 'image file')
    delete_file(File.join(dest_dir, "#{fk_picture}_tn.jpg"), 'thumbnail file')
  end
  
  def delete_file(file, description)
    if File.exists? file
      raise ArgumentError.new("#{description} (#{file}) is not writable") unless File.writable? file
      File.delete(file)
    end
  end

end

# running this file from the command line?
if __FILE__ == $0

  # == Synopsis
  # command line exit codes
  class ExitCode
    UNKNOWN = 3
    CRITICAL = 2
    WARNING = 1
    OK = 0
  end

  # == Synopsis
  # bare bones logger
  # == Usage
  # logger = Logger.new(STDOUT)
  # logger.debug("...")
  # logger.puts("...")
  # logger.error("...")
  class Logger
    def initialize(outputter)
      @outputter = outputter
    end
    def puts(str)
      @outputter.puts(str)
    end
    def debug(str)
      @outputter.puts(str) if $DEBUG
    end
    def error(str)
      @outputter.puts("ERROR: #{str}")
    end
    def warning(str)
       warn(str)
    end
    def warn(str)
      @outputter.puts("WARNING: #{str}")
    end
  end


  module Runner

    COMMAND_OPTIONS = {
      :command => "either 'update' or 'delete'",
      :fk_picture => "the Picture ID",
      :image_source => "the image source file",
      :dest_dir => "the destination directory"
    }

    def self.run(args)
      @logger = Logger.new(STDERR)

      configFile = '.' + File.basename(__FILE__, ".*") + 'rc'
      p ['configFile', configFile] if $DEBUG

      # load config values from defaultConfig(), then ~/#{configFile}, then #{configFile}
      homeConfigFile = File.join("#{ENV['HOME']}", configFile)
      @config = defaultConfig()
      @config.merge(YAML.load_file(homeConfigFile)) if File.exist?(homeConfigFile)
      @config.merge(YAML.load_file(configFile)) if File.exist?(configFile)

      p @config if $DEBUG

      p ['COMMAND_OPTIONS', COMMAND_OPTIONS] if $DEBUG

      # parse the command line
      options = setupParser()
      begin
        od = options.parse(args)
        COMMAND_OPTIONS.each do |cmd, desc|
          @config[cmd] = od["--#{cmd.to_s}"]
        end
        p ['@config', @config]
      rescue
        @logger.error $!.to_s
        @logger.puts(options.to_s)
        exit ExitCode::CRITICAL
      end

      # create and execute class instance here
      begin
        manager = ManageMediapics.new(@config, @logger)
        manager.execute
      rescue
        @logger.error $!.to_s
        @logger.puts(options.to_s)
        exit ExitCode::CRITICAL
      end
    end

    # == Synopsis
    # default configuration values
    def self.defaultConfig()
      config = {}
      config
    end

    # == Synopsis
    # setup the command line option parser
    def self.setupParser()
      options = OptionParser.new()
      options << Option.new(:flag, :names => %w(--help), :opt_found => lambda {@logger.error(options.to_s)}, :opt_description => "This usage information")
      COMMAND_OPTIONS.each do |cmd, desc|
        cmd_names = ["--#{cmd.to_s}"]
        options << Option.new(:names => cmd_names, :arg_arity => [1,1], :opt_found => OptionParser::GET_ARGS, :opt_description => desc)
      end
      options
    end

  end
  Runner.run(ARGV)
  exit ExitCode::OK
end

