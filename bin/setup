#!/usr/bin/env ruby

# Copyright 2008 by Roy Wright
# License: GPL version 2 (http://www.opensource.org/licenses/gpl-2.0.php)

# == Synopsis
# This file is used to setup the environment for lmce_manager rails application
#
# == Details
#
# == Usage
# Create a directory (suggested: /var/www/rails) with your linuxmce account and
# www-data group permissions:
#
#  sudo mkdir -p /var/www/rails
#  sudo chown linuxmce.www-data /var/www/rails
#
# Now extract the lmce_manager archive in this directory:
#
#  cp lmce_manager-*.tgz /var/www/rails
#  cd /var/www/rails
#  tar xzf lmce_manager-*.tgz
#  chown -R linuxmce.www-data lmce_manager
#
# Now run this setup script:
#
#  bin/setup
#
# Follow any instructions from the setup script.
#
# == Author
# Roy Wright
#

require 'rubygems'
require 'logger'
require 'commandline/optionparser'
include CommandLine

RAILS_DIR = File.expand_path File.join(File.dirname(__FILE__), '..')
FILES_DIR = File.join(RAILS_DIR, 'files')

class LmceManagerSetup
  def initialize(config, logger)
    @config = config
    @logger = logger
  end
  
  def execute
    desc "First install the ancient versions of support tools furnished via kubuntu"
    packages = %w(libyaml-ruby libzlib-ruby rubygems ruby1.8-dev build-essential libmysql-ruby1.8 libmysql-ruby irb apache2-prefork-dev)
    packages.each do |pkg|
      sudo "apt-get install -y #{pkg}"
    end
    
    desc "then upgrade gem to the the lastest version"
    sudo "gem update -y"
    sudo "gem update -y --system"
    sudo "rm /usr/bin/gem"
    sudo "ln -s /usr/bin/gem1.8 /usr/bin/gem"
    
    desc "now install rails and the required gems"
    gems = %w(rails composite_primary_keys railroad will_paginate chronic packet xml-simple commandline OptionParser termios mysql xml-simple passenger)
    gems.each do |name|
      sudo "gem install #{name}"
    end
    sudo "gem install --platform ruby fastthread"
    
    desc "next install passenger and hook it into our apache"
    sudo "passenger-install-apache2-module"
    sudo "cp #{FILES_DIR}/etc/apache2/mods-available/passenger.load /etc/apache2/mods-available"
    sudo "cp #{FILES_DIR}/etc/apache2/mods-available/passenger.conf /etc/apache2/mods-available"
    sudo "chmod 644 /etc/apache2/mods-available/passenger.load"
    sudo "chmod 644 /etc/apache2/mods-available/passenger.conf"
    sudo "chown root.root /etc/apache2/mods-available/passenger.load"
    sudo "chown root.root /etc/apache2/mods-available/passenger.conf"
    sudo "ln -s /etc/apache2/mods-available/passenger.load /etc/apache2/mods-enabled/passenger.load"
    sudo "ln -s /etc/apache2/mods-available/passenger.conf /etc/apache2/mods-enabled/passenger.conf"
    
    sudo "chmod 775 #{FILES_DIR}/hack_apache2_sites_pluto"
    sudo "#{FILES_DIR}/hack_apache2_sites_pluto"
    
    sudo "chmod 644 /etc/apache2/sites-available/pluto"
    sudo "chown root.root /etc/apache2/sites-available/pluto"
    sudo "ln -s #{RAILS_DIR}/lmce_manager/public /var/www/lmce_manager"
    sudo "/etc/init.d/apache2 reload"
  end
  
  def desc(msg)
    puts
    puts msg
  end

  def sudo(cmd)
    puts "sudo #{cmd}" if @config[:verbose]
    system "sudo #{cmd}" unless @config[:pretend]
  end
  
end

# running this file from the command line?
if __FILE__ == $0

  # == Synopsis
  # command line exit codes
  class ExitCode
    UNKNOWN = 3
    CRITICAL = 2
    WARNING = 1
    OK = 0
  end

  module Runner

    def self.run(args)
      @logger = Logger.new(STDERR)

      configFile = '.' + File.basename(__FILE__, ".*") + 'rc'
      p ['configFile', configFile] if $DEBUG

      # load config values from defaultConfig(), then ~/#{configFile}, then #{configFile}
      homeConfigFile = File.join("#{ENV['HOME']}", configFile)
      @config = defaultConfig()
      @config.merge(YAML.load_file(homeConfigFile)) if File.exist?(homeConfigFile)
      @config.merge(YAML.load_file(configFile)) if File.exist?(configFile)

      # parse the command line
      options = setupParser()
      begin
        od = options.parse(args)
        @config[:verbose] = od["--verbose"]
        @config[:pretend] = od["--pretend"]
        p ['@config', @config] if $DEBUG
      rescue
        @logger.error $!.to_s
        @logger.error $!.backtrace.to_s
        @logger.puts(options.to_s)
        exit ExitCode::CRITICAL
      end

      # create and execute class instance here
      begin
        setup = LmceManagerSetup.new(@config, @logger)
        setup.execute
      rescue
        @logger.error $!.to_s
        @logger.error $!.backtrace.to_s
        @logger.puts(options.to_s)
        exit ExitCode::CRITICAL
      end
    end

    # == Synopsis
    # default configuration values
    def self.defaultConfig()
      config = {}
      config
    end

    # == Synopsis
    # setup the command line option parser
    # ref http://optionparser.rubyforge.org/
    def self.setupParser()
      options = OptionParser.new()
      options << Option.new(:flag, :names => %w(--help), 
                            :opt_found => lambda {@logger.error(options.to_s) ; exit ExitCode::OK}, 
                            :opt_description => "This usage information")
      options << Option.new(:flag, :names => %w(--verbose -v))
      options << Option.new(:flag, :names => %w(--pretend -p))
      options
    end

  end
  Runner.run(ARGV)
  exit ExitCode::OK
end

