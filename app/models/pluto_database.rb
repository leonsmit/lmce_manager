# Copyright 2008 by Roy Wright
# License: GPL version 2 (http://www.opensource.org/licenses/gpl-2.0.php)

require 'active_record'

$config = YAML.load_file(File.join(File.dirname(__FILE__), '../../config/database.yml'))

class PlutoDatabase < ActiveRecord::Base
  self.abstract_class = true

  # == Synopsis
  # debug method for dumping an object.
  # intended to be used in the console.
  def dump(objects=[], indent=0, title="")
    unless objects.include? "#{self.class.name}-#{id}"
      objects << "#{self.class.name}-#{id}"
      dump_puts indent, "dump #{title}:"
      attributes.to_a.collect {|a| "#{a[0]} => #{a[1]}"}.sort.each {|b| dump_puts indent, b}
      self.class.reflect_on_all_associations.each do |association|
        dump_puts indent, "*** association: #{association.name} #{association.macro} #{association.class_name}"
        if((indent == 0) || ((indent > 0) && (association.macro == :belongs_to) ))
          m = method(association.name)
          begin
            result = m.call
            unless result.nil?
              if result.kind_of? Array
                result.compact.each { |r| dump_recurse(title, association.name, r, objects, indent) }
              else
                dump_recurse(title, association.name, result, objects, indent)
              end
            end
          rescue Exception => e
            puts "#{e} Exception while dumping association #{association.inspect}"
          end
        end
      end
      puts
    end
  end

  # == Synopsis
  # debug method for recursively dumping an object.
  # intended to be used in the console.
  def dump_recurse(title, name, obj, objects, indent)
    if obj.respond_to?("dump")
      obj.dump(objects, indent + 2, "#{title}.#{name}")
    else
      dump_puts indent, "inspect:"
      dump_puts indent, obj.inspect
    end
  end

  # == Synopsis
  # debug method for dumping an indented string.
  # intended to be used in the console.
  def dump_puts(indent, str)
    puts "  " * indent + str
  end

  # == Synopsis
  # return true if the object is not referenced by any other models.
  # == Details
  # finds the association method names (:lmce_*) then invokes each one.
  # the association may return either a single object or an array of objects,
  # so flatten the array before checking if it contains anything.  If it
  # does not, then there are no references by other models.
  def dangling?
    references = []
    self.class.reflect_on_all_associations.collect{|a| a.name}.each do |name|
      references << self.send(name)
    end
    references.flatten.compact.empty?
  end

  def references
    references = []
    self.class.reflect_on_all_associations.collect{|a| a.name}.each do |name|
      references << self.send(name)
    end
    references.flatten.compact
  end


  # add your model extensions after this line
end































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































