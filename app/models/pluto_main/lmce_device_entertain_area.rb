# Copyright 2008 by Roy Wright
# License: GPL version 2 (http://www.opensource.org/licenses/gpl-2.0.php)
# generated by mysql2models.rb 0.2 Tue Jun 17 01:17:04 -0500 2008
#
# == Synopsis
# Database Table: pluto_main.Device_EntertainArea
# Through Join Table
#
# * primary keys: FK_Device,FK_EntertainArea
# * foreign keys: FK_Device,FK_EntertainArea
# * external keys: 
#
# == References
# * PlutoMain::LmceEntertainArea
# * PlutoMain::LmceDevice
#
# == Referenced By
#
# == Database Table Columns
#   * FK_Device           [Type:int(11), Default:0, Key:PRI, Null:NO]
#   * FK_EntertainArea    [Type:int(11), Default:0, Key:PRI, Null:NO]
#   * psc_id              [Type:int(11), Default:NULL, Key:UNI, Null:YES]
#   * psc_batch           [Type:int(11), Default:NULL, Null:YES]
#   * psc_user            [Type:int(11), Default:NULL, Null:YES]
#   * psc_frozen          [Type:tinyint(1), Default:0, Null:YES]
#   * psc_mod             [Type:timestamp, Default:CURRENT_TIMESTAMP, Null:YES]
#   * psc_restrict        [Type:int(11), Default:NULL, Null:YES]
#
# == Associations
# * belongs_to lmce_device
# * belongs_to lmce_entertain_area
#

class PlutoMain::LmceDeviceEntertainArea < PlutoMainDatabase
  set_table_name "Device_EntertainArea"
  set_primary_keys "FK_Device", "FK_EntertainArea"

  # foreign key references
  # FK_Device_EntertainArea references PlutoMain::LmceEntertainArea (FK_EntertainArea)
  belongs_to  :lmce_entertain_area,
      :class_name => "PlutoMain::LmceEntertainArea",
      :foreign_key => "FK_EntertainArea"

  # FK_Device_EntertainArea references PlutoMain::LmceDevice (FK_Device)
  belongs_to  :lmce_device,
      :class_name => "PlutoMain::LmceDevice",
      :foreign_key => "FK_Device"

  # handle psc_mod timestamping

# Set the psc_mod timestamp to the current time when creating a record.
  def before_create
    self.psc_mod ||= Time.now
  end

# Set the psc_mod timestamp to the current time when updating a record.
  def before_update
    self.psc_mod = Time.now
  end

  # add your model extensions after this line

end

