# Copyright 2008 by Roy Wright
# License: GPL version 2 (http://www.opensource.org/licenses/gpl-2.0.php)
# generated by mysql2models.rb 0.2 Tue Jun 17 01:17:05 -0500 2008
#
# == Synopsis
# Database Table: pluto_media.Disc
#
# * primary keys: PK_Disc
# * foreign keys: FK_MediaSubType,FK_FileFormat,FK_File
# * external keys: EK_MediaType,EK_Users_Private
#
# == References
# * PlutoMedia::LmceMediaSubType
# * PlutoMedia::LmceFile
# * PlutoMedia::LmceFileFormat
#
# == Referenced By
# * PlutoMedia::LmceBookmark
# * PlutoMedia::LmceRipStatus
# * PlutoMedia::LmcePictureDisc
# * PlutoMedia::LmceCoverArtScan
# * PlutoMedia::LmceLongAttribute
# * PlutoMedia::LmceDiscLocation
# * PlutoMedia::LmceDiscUser
# * PlutoMedia::LmceDiscAttribute
#
# == Database Table Columns
#   * PK_Disc             [Type:int(11), Default:NULL, Key:PRI, Null:NO, Extra:auto_increment]
#   * ID                  [Type:varchar(255), Default:NULL, Null:YES]
#   * EK_MediaType        [Type:int(11), Default:0, Null:NO]
#   * FK_MediaSubType     [Type:int(11), Default:NULL, Null:YES]
#   * FK_FileFormat       [Type:int(11), Default:NULL, Null:YES]
#   * EK_Users_Private    [Type:int(11), Default:NULL, Null:YES]
#   * DateLastViewed      [Type:datetime, Default:NULL, Null:YES]
#   * IsNew               [Type:tinyint(1), Default:1, Null:NO]
#   * FK_File             [Type:int(11), Default:NULL, Null:YES]
#   * psc_id              [Type:int(11), Default:NULL, Null:YES]
#   * psc_batch           [Type:int(11), Default:NULL, Null:YES]
#   * psc_user            [Type:int(11), Default:NULL, Null:YES]
#   * psc_frozen          [Type:tinyint(1), Default:0, Null:YES]
#   * psc_mod             [Type:timestamp, Default:CURRENT_TIMESTAMP, Null:NO]
#   * psc_restrict        [Type:int(11), Default:NULL, Null:YES]
#
# == Associations
# * belongs_to lmce_file
# * belongs_to lmce_file_format
# * belongs_to lmce_media_sub_type
# * belongs_to lmce_media_type
# * belongs_to lmce_users_private
# * has_many lmce_attributes
# * has_many lmce_bookmarks
# * has_many lmce_cover_art_scans
# * has_many lmce_disc_attributes
# * has_many lmce_disc_locations
# * has_many lmce_disc_users
# * has_many lmce_long_attributes
# * has_many lmce_picture_discs
# * has_many lmce_pictures
# * has_many lmce_rip_statuses
# * has_many lmce_users
#

require 'pluto_main/lmce_media_type'
require 'pluto_main/lmce_user'

include PlutoMain

class PlutoMedia::LmceDisc < PlutoMediaDatabase
  set_table_name "Disc"
  set_primary_key "PK_Disc"

  # foreign key references
  # FK_Disc references PlutoMedia::LmceMediaSubType (FK_MediaSubType)
  belongs_to  :lmce_media_sub_type,
      :class_name => "PlutoMedia::LmceMediaSubType",
      :foreign_key => "FK_MediaSubType"

  # FK_Disc references PlutoMedia::LmceFile (FK_File)
  belongs_to  :lmce_file,
      :class_name => "PlutoMedia::LmceFile",
      :foreign_key => "FK_File"

  # FK_Disc references PlutoMedia::LmceFileFormat (FK_FileFormat)
  belongs_to  :lmce_file_format,
      :class_name => "PlutoMedia::LmceFileFormat",
      :foreign_key => "FK_FileFormat"

  # 1:n  (FK_Disc)
  has_many  :lmce_bookmarks,
      :class_name => "PlutoMedia::LmceBookmark",
      :foreign_key => "FK_Disc"

  # 1:n  (FK_Disc)
  has_many  :lmce_rip_statuses,
      :class_name => "PlutoMedia::LmceRipStatus",
      :foreign_key => "FK_Disc"

  # n:n via through join table PlutoMedia::LmcePictureDisc  (FK_Disc)
  has_many  :lmce_picture_discs,
      :class_name => "PlutoMedia::LmcePictureDisc",
      :foreign_key => "FK_Disc"
  has_many  :lmce_pictures,
      :through => :lmce_picture_discs

  # 1:n  (FK_Disc)
  has_many  :lmce_cover_art_scans,
      :class_name => "PlutoMedia::LmceCoverArtScan",
      :foreign_key => "FK_Disc"

  # 1:n  (FK_Disc)
  has_many  :lmce_long_attributes,
      :class_name => "PlutoMedia::LmceLongAttribute",
      :foreign_key => "FK_Disc"

  # 1:n  (FK_Disc)
  has_many  :lmce_disc_locations,
      :class_name => "PlutoMedia::LmceDiscLocation",
      :foreign_key => "FK_Disc"

  # n:n via through join table PlutoMedia::LmceDiscUser  (FK_Disc)
  has_many  :lmce_disc_users,
      :class_name => "PlutoMedia::LmceDiscUser",
      :foreign_key => "FK_Disc"
      # :through doesn't work when join table is in the same database 
      # but the destination table is not, so use finder_sql
      # :through => :lmce_disc_users
  has_many  :lmce_users,
      :class_name => "PlutoMain::LmceUser",
      :foreign_key => "FK_Disc",
      :finder_sql => 'SELECT Users.* ' +
          'FROM pluto_main.Users ' +
          'INNER JOIN pluto_media.Disc_Users ' +
          'ON (pluto_main.Users.PK_Users = pluto_media.Disc_Users.EK_Users) ' +
          'WHERE (Disc_Users.FK_Disc = #{id})'

  # n:n via through join table PlutoMedia::LmceDiscAttribute  (FK_Disc)
  has_many  :lmce_disc_attributes,
      :class_name => "PlutoMedia::LmceDiscAttribute",
      :foreign_key => "FK_Disc"
  has_many  :lmce_attributes,
      :through => :lmce_disc_attributes

  # external key references
  # EK_Disc references PlutoMain::LmceUser (EK_Users_Private)
  belongs_to  :lmce_users_private,
      :class_name => "PlutoMain::LmceUser",
      :foreign_key => "EK_Users_Private"

  # EK_Disc references PlutoMain::LmceMediaType (EK_MediaType)
  belongs_to  :lmce_media_type,
      :class_name => "PlutoMain::LmceMediaType",
      :foreign_key => "EK_MediaType"

  # handle psc_mod timestamping

# Set the psc_mod timestamp to the current time when creating a record.
  def before_create
    self.psc_mod ||= Time.now
  end

# Set the psc_mod timestamp to the current time when updating a record.
  def before_update
    self.psc_mod = Time.now
  end

  # add your model extensions after this line

end

